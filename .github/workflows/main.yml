name: Build Debian Package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      full_version: ${{ steps.tag.outputs.full_version }}
      tag: ${{ steps.tag.outputs.tag }}
    container: 
      image: debian:bookworm
      volumes:
        - /usr:/usr-host
        - /opt:/opt-host
      options: --privileged
    steps:
      - name: Maximize build space
        run: |
          df -h
          rm -rf /usr-host/share/dotnet
          rm -rf /usr-host/share/swift
          rm -rf /usr-host/share/java
          rm -rf /usr-host/local/lib/android
          rm -rf /opt-host/ghc
          rm -rf /opt-host/hostedtoolcache
          rm -rf /opt-host/az
          df -h
      - name: Install basic dependencies
        id: install-deps
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y wget git lsb-release wget software-properties-common gnupg
      - name: Install more dependencies
        id: install-more
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -y build-essential devscripts debhelper dh-python asciidoc-base bc bison cpio dwarves flex kmod libdw-dev libiberty-dev libnuma-dev  libslang2-dev lz4 rsync xmlto
          apt-get install -y libunwind-dev libpfm4-dev coccinelle openjdk-17-jdk libcapstone-dev libbabeltrace-dev systemtap-sdt-dev libzstd-dev dwarves zstd libbfd-dev libperl-dev
      - name: Install clang
        id: install-clang
        run: |
          export DEBIAN_FRONTEND=noninteractive
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          ./llvm.sh 18
          apt-get install -y clang-18 lldb-18 lld-18 clangd-18
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download submodules
        id: download-submodules
        run: |
          git config --global safe.directory '*'
          git submodule update --init --recursive
      - id: commit
        uses: prompt/actions-commit-hash@v3
      - name: Prepare tag operations
        id: tag
        run: |
          echo "full_version=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "tag=${{ steps.commit.outputs.short }}" >> "$GITHUB_OUTPUT"
      - name: Download pahole
        id: pahole
        run: |
          apt-get install -y cmake python3 python3-matplotlib zlib1g-dev libelf-dev
          git clone https://github.com/acmel/dwarves.git --recursive --branch v1.29 --single-branch
          cmake -S dwarves -B dwarves_build -G "Unix Makefiles" -D __LIB=lib -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=OFF
      - name: Prepare the build environment
        id: prepare-build-env
        run: |
          echo 'deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription' > /etc/apt/sources.list.d/pve-install-repo.list
          echo 'deb http://security.debian.org/debian-security bookworm-security main contrib' >> /etc/apt/sources.list.d/pve-install-repo.list
          wget https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y libpve-common-perl
          yes | mk-build-deps -ir submodules/zfsonlinux/debian/control
          export LLVM=-18
          export LLVM_IAS=1
          export INSTALL_MOD_STRIP=1
          export CC="clang-18"
          export CXX="clang++-18"
          cmake --build dwarves_build
          cmake --install dwarves_build
          rm -rf dwarves_build
      - name: Build the kernel
        id: build-kernel-package
        run: |
          LLVM=-18 LLVM_IAS=1 INSTALL_MOD_STRIP=1 CFLAGS=" -mtune=raptorlake " make -j$(nproc) deb
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: |
            *.deb
          if-no-files-found: error
  
  tag_version:
    needs: build_and_push
    runs-on: ubuntu-latest
    outputs:
      tagged: ${{ steps.check_tagged.outputs.tagged }}
      tag: ${{ steps.check_tagged.outputs.tag }}
    steps:
      - name: Set safe directory
        id: safe-dir
        run: |
          git config --global safe.directory '*'

      - name: 🔃 Checkout dist branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.build_and_push.outputs.branch }}
          fetch-depth: 0

      - name: ⚙️ Check tag exists
        id: check_tag
        uses: mukunku/tag-exists-action@v1.0.0
        with:
          tag: ${{ needs.build_and_push.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔖 Tag version
        id: tag
        if: ${{ steps.check_tag.outputs.exists == 'false' }}
        uses: anothrNick/github-tag-action@1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ needs.build_and_push.outputs.tag }}

      - name: ⚙️ Check created tag
        id: check_tagged
        run: |
          echo "tag=${{ needs.build_and_push.outputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "tagged=${{ (steps.check_tag.outputs.exists == 'false') && (steps.tag.outputs.new_tag == steps.tag.outputs.tag) }}" >> "$GITHUB_OUTPUT"

  make-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: tag_version
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-package
          path: .
      - name: 🛎️ Create release
        uses: ncipollo/release-action@v1
        with:
          name: linux-firmware-${{ needs.tag_version.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.tag_version.outputs.tag }}
          commit: ${{ github.sha }}
          draft: false
          artifacts: |
            *.deb